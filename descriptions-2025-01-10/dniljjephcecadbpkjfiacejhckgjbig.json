{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Bitbucket Conventional Comments Helper"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Aims to categorize code review comments in a way that communicates the intent, urgency, and required action effectively."
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Enhance your code review process on Bitbucket with the Bitbucket Conventional Comments Helper Chrome extension. This tool helps developers provide clear, structured, and meaningful feedback on Pull Requests using a set of predefined comment categories. Streamline your reviews, foster collaboration, and maintain high-quality code by categorizing feedback effectively during the review process.\n\n✨ Features\n\n● Praise: Provide positive feedback on well-written, clean, or creative solutions to encourage best practices and team motivation.\n\n● Question: Ask for clarification or further explanations about specific code sections to ensure understanding or highlight uncertainties.\n\n● Suggestion: Offer actionable suggestions for improvements or optimizations that can enhance the codebase.\n\n● Issue: Issues highlight specific problems with the subject under review. These problems can be user-facing or behind the scenes.\n\n● Nitpick: Point out minor issues, inconsistencies, or small fixes that won't break functionality but help maintain clean and consistent code.\n\n● Chore: Comment on non-functional tasks, maintenance, or minor updates that don't affect core functionality but are necessary for project upkeep.\n\n● Thought: Share high-level reflections, insights, or design considerations about the code, architecture, or implementation.\n\n● Todo: Small, trivial, but necessary changes. It helps direct the reader’s attention to comments requiring more involvement.\n\n● Note: Notes are always non-blocking and simply highlight something the reader should take note of.\n\n● Polish: Polish comments are like a suggestion, where there is nothing necessarily wrong with the relevant content, there’s just some ways to immediately improve the quality.\n\n● Quibble: Quibbles comments are like a minor complaint or criticism or objection, often considered petty or trivial. It can refer to small issue or disagreement that is not significant enough to a major concern, but still worth mentioning.\n\n● Decorator(Blocking/Non-Blocking): A comment with this decoration should or shouldn't prevent the subject under review from being accepted.\n\nTo learn more about Conventional comments: https://conventionalcomments.org/\n\n✨ Key Benefits\n\n● Bitbucket Integration: Fully integrated with Bitbucket, making it easy to leave structured comments directly on pull requests within your Bitbucket repositories.\n\n● Organize Feedback: Categorize your comments for easier reference and follow-up, ensuring that feedback is always actionable and clear.\n\n● Improved Collaboration: Foster open communication and enhance teamwork by using a structured approach to code reviews.\n\n● Inline Comment Shortcuts: Quick access to 'praise', 'nitpick', suggestion, 'question', 'thought', and more.\n\n● Integrated Tooltips: Each comment type comes with a clarification of its correct usage.\n\n\nStreamline your Bitbucket code reviews, improve collaboration, and make feedback more actionable with the Bitbucket Conventional Comments Helper. Try it today to elevate your code review process!"
  }
}