{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "React Monitor"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "ReactMonitor\nQuickly visualize React's component tree performance for improved onboarding and debugging\n\nWhat does it do\nBy usingâ€¦"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "ReactMonitor\nQuickly visualize React's component tree performance for improved onboarding and debugging\n\nWhat does it do\nBy using the ReactMonitor Chrome DevTool, beginning and experienced developers alike are able to get a visual representation of an existing codebase that they are working on. Built with React, this tool will dynamically traverse the fiber root object behind the scenes, displaying state, props, render times and the type of components on the page.\n\nHow to install and run?\nRun the NPM package in your own codebase by following the steps below.\n\n- Install the package (npm install reactmonitorfiber)\n- Require/Import the package (import reactMonitor from 'reactmonitorfiber')\n- Invoke React Monitor with an input of the DOM element that you are rendering the React Element into\n      const container = document.querySelector('#root');\n      reactDOM.render(<App />, container);\n      reactMonitor(container);\n- Navigate to the domain of your React application that you will be running React Monitor on\n- Open your Chrome Developer Tools and select React Monitor\n\nYou are now able to view state changes on your application in real time!"
  }
}