{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "URL Rewriter"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Rewrite URLs using custom rules."
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Rewrite omnibox strings into desired URLs.\n\nConfigure the rewrite rules you'd like in the extention options. Rules are of the form:\n\nregex_with_capturing_groups --> some_url_with_%s1_and_%s2\n\nWhere %s1 and %s2 are the first and second capture groups, respectively.\n\nFor example, the following rules may be useful:\n\n# Fallback: grab first URL and use it\n.*(https?://[^\\s]+).* --> %s1\n.*(www\\.[^\\s]+).* --> %s1\n.*(www\\d+\\.[^\\s]+).* --> %s1\n(.*) --> https://www.google.com/search?q=%s1\n\nThe first identifies a url starting with http and will go to that url.\nThe second identifies urls with www.\nThe third identifies urls such as www2, www3, etc\nThe fourth rule falls back on a google search for the entire string."
  }
}