{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Simple Tab Connector"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Allow to fetch data from another tab"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Simple Tab Connector or STC is a minimalistic web scraping tool that allows you to extract content from another web page and use it on your web page.\n\nTo create a connection:\n1) open a tab with a web page that should use the data of another;\n2) click on the extension icon, a pop-up window with input and output buttons should appear;\n3) click the “Output” button, it should be replaced by the host of the current web page;\n3) open a tab with a web page that should send data to another;\n4) click on the extension icon, a pop-up window with input and output buttons should appear;\n5) press the “Input” button, it should be replaced by the host of the current web page;\n6) When the input and output tabs are specified, you should see a green counter (this indicates the success of the data transfer).\n\n\nSTC does not provide a user interface to display the received content. Instead, it raises custom window events:\n1) the connection event (type - 'connection', detail - 'on'/'off') notifies about  connection status between tabs;\n2) the mutation event (type - 'mutation', detail contains html) notifies about DOM changes on the input page;\n3) the reloading request event (type - 'requestReloading') allows to reload the input page that could be useful to fix rendering issue sometimes;\n4) the reloading success event (type - 'reloadingDone') notifies that the input page is ready after a reload;\n5) the data request event (type - 'requestData', detail contains an object with url) allow to request additional data from the input page via fetch API;\n6) the data response event (type = 'responseData', detail contains response of data request) allow to fetch requested data after invocation of the previous event.\n7) the message event (type = 'wsData') allow to get websocket messages from the input tab as byte array.\n\nYou can handle or raise these events in your JavaScript code. Good luck."
  }
}