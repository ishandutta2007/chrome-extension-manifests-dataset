{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "GraphQL state"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Data visualization for GraphQL state"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "This Chrome extension will add a panel named \"GraphQL state\" to your devtools. When you use the framework \"https://github.com/babyfish-ct/graphql-state\", it can help you debug.\n\nIn the \"GraphQL state\" panel, you will see three tab pages: \"Simple states\", \"Graph states\" and \"Evict Logs\".\n\n1. Simple states\nThe framework supports simple state management similar to \"recoil\", this tab page can visualize all simple states for you.\n\n2. Graph states\nThe framework supports graph state management similar to \"Apollo Client\" and \"Relay\", its built-in normalized-cache is used to manage all data and relationships. This tab page can visualize this normalized-cache for you.\n\n3. Evict Logs\n\nThis is the core value of the framework.\n\nThe essence of UI state is that one main mutation causes N extra mutations, the more complex the UI, the larger the N.\n\nThe framework allows developer only focus on main mutation, all the extra mutations will be executed automatically.\n\nCompare with Apollo Client and Relay, after mutation, you neither need to update other affected data in the cache, nor need to determine which queries will be affected and need to be refetched.\n\nWhen the framework is automatically performing extra mutations, it can choose to modify the cache directly, or it may choose to evict affected data from cache (this will cause related queries to be refetched automatically).\n\nObviously, the first choice is better than the second choice. This tab page lists the history of the second choice made by the framework, and tells the developer the following information.\n\ni. Why did the framework make the second choice?\nii. Is it possible for developers to intervene in optimization and let framework make the first choice?\niii. If so, what should developers do?"
  }
}