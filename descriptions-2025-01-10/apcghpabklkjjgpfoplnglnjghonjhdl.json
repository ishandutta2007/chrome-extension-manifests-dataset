{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "How Fugu is the Web?"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "An extension to shine light on the Project Fugu üê° APIs web apps want to use."
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "How it works\n\nAPI data\n\nThe raw data for the different Project Fugu üê° APIs is curated in a spreadsheet, which is then turned into JavaScript, so keeping the list of APIs updated is hopefully a straightforward task.\n\nAPI detection\n\nThe extension monitors the requests a page makes via the chrome.webRequest.onBeforeRequest.addListener() API. Each response body, grouped by main frame, JavaScript, and Web App Manifest response bodies, is then run through a set of regular expressions like /navigator\\.hid\\.requestDevice\\s*\\(/g to determine if the code hints at a Project Fugu üê° API potentially being used.\n\nBrowser support detection\n\nMost Project Fugu üê° APIs are easily feature-detectable by checking for the existence of interfaces or properties, for example, as in 'BarcodeDetector' in window. Other APIs require a ServiceWorkerRegistration, but luckily the popup window in Manifest V3 extensions uses a service worker, so it can be used via an IIFE that can be run in the client or the service worker. An example is (async () => 'periodicSync' in (await navigator.serviceWorker?.ready || self.registration))().\n\nThe support categories are listed below:\n\n‚úîÔ∏è Supported by your browser.\nüö´ Not supported by your browser.\nü§∑ Support unknown for your browser. (The only way to know would be user-agent sniffing.)\n\nDeep-linking\n\nThe extension makes use of Text Fragment URLs to deep-link to the occurrence of a detected API, for example https://airhorner.com/scripts/main.min.js#:~:text=navigator.setAppBadge(. For main frame documents, the source code gets rendered in a helper HTML page controlled by the extension, since it is impossible to link to view-source: protocol links.\n\nLimitations\n\n‚Ä¢ The chrome.webRequest.onBeforeRequest.addListener() API unfortunately does not \"see\" requests that are handled by a service worker (crbug.com/766433). There are three possible workarounds for this:\n  - Hard-reload via ‚åò/ctrl+shift+r.\n  - Open DevTools and check the Bypass for network checkbox in the Service Worker section of the Application tab.\n  - Clear storage in the Storage section of the Application tab.\n‚Ä¢ The extension only does static code analysis, that is, there is no guarantee that the app actually uses the code snippet where a Project Fugu üê° API was detected.\n‚Ä¢ Heavily minified code will not be detected. For example, if an app minifies navigator.clipboard.write() to const nav = navigator; nav.clipboard.write(), the extension will not detect this.\n\nLicense\n\nApache 2.0."
  }
}