{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "rabbithole"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Digs down into the nasty details of your ad units"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "As a publisher on the web today, you may have a love-hate relationship with ad networks.  On one hand, those ad networks help to pay the bills.  But on the other hand, their questionable coding abilities, poor security, and dubious business practices expose you to all sorts of problems.\n\nOur team has spent countless hours dissecting the DOM to try to track down offending ads.  This is tedious work, especially when an ad call gets bounced from network to network, creating an extremely complex DOM of nested IFRAMEs.\n\nrabbithole is designed to streamline this process.  Using a CSS selector provided by you, it identifies the top-level DOM elements for your ad units.  It then recursively descends those elements, building a simpler object model for you to analyze.\n\n* simplifies the identification and interpretation of the ad-related portion of the DOM\n* \"compresses\" the tree by skipping past DOM elements that aren't really important and only tracking select properties\n* makes off-site objects easily identifiable\n* tries to identify pixel trackers\n* tries to identify the DOM elements that are most likely the ad creative itself\n* attempts to keep track of a \"network path\" so you can see the whole ad chain where ads are coming from; this is a work in progress\n* computes statistics like the number of scripts and iframes loaded beneath each node in the tree\n\nIn order for rabbithole to work with your site, you need to give it a CSS selector that will capture all the top-level DOM elements of your ad units (and is specific enough to *not* capture non-ad-unit elements).\n\nFor example, if you look at the ad tags on http://slashdot.org/, you will see that they all have IDs like \"div-gpt-ad-728x90_a\" and \"div-gpt-ad-300x250_a\".  You can capture them all with a selector like\n\n    [id*='div-gpt-ad']\n\nOnce you have your selector, use the options dialog to configure rabbithole.  You can open it either from the extensions page in chrome, or by clicking on the gear icon in the rabbithole popup window.  If you have a rabbithole window open when you change the CSS selector, you'll need to close rabbithole and reopen it to get it to rescan your page's DOM.\n\nSource: https://github.com/jpriebe/rabbithole"
  }
}