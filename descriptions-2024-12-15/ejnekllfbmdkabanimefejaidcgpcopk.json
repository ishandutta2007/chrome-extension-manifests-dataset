{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "ROBOP"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Support extension for ROBOP"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "The code is wrapped inside an immediately-invoked function expression (IIFE) (function(){ ... })() to create a local scope for the code.\n\nThe code defines several variables such as port, portname, base_debug, and back_debug to be used later.\n\nThe function BaseOnPortMessage is defined, which handles the messages received from the extension's background script. It checks the validity of the message and performs specific actions based on the message's functionName.\n\nThe function BaseOnPortDisconnect is defined, which handles the disconnection of the port. It clears the port reference and attempts to reconnect after a timeout.\n\nThe function Baseconnect is defined, responsible for establishing a connection with the native messaging port. It sets up listeners for message and disconnect events.\n\nThe Baseconnect function is called to initiate the connection.\n\nDebug logging statements are printed if the back_debug flag is set.\n\nThe variable roboputil_script is declared.\n\nThe portname variable is assigned a string value.\n\nThe lastwindowId variable is set to 1.\n\nThe robopdebug variable is set to false.\n\nThe code checks the browser type (Chrome, Firefox, or Edge) and assigns the corresponding value to the browser property in the message object.\n\nThe SendToTab function is defined, which sends a message to a specific tab in a window. It uses the tabssendMessage function, waits for a response, and handles any errors or retries.\n\nThe OnPortMessage function is defined, which handles the messages received from the native messaging port. It performs specific actions based on the message's functionName.\n\nVarious actions are defined for different functionName values, such as enumerating windows, tabs, selecting a tab, updating a tab, closing a tab, and opening a URL.\n\nThe getCurrentWindow function is called to get information about the current window.\n\nThe code handles updating tab information, highlighting tabs, and opening URLs in tabs.\n\nDebug logging statements are printed if the back_debug flag is set.\n\nThe OnPortMessage function is called to handle the received message.\n\nThe code checks if the port variable is null or undefined and logs a warning if it is.\n\nThe code returns the message object.\n\nHere is a breakdown of the major components and functionalities in the code:\n\nOnPortDisconnect: This function handles the disconnection of the native port. It checks for any errors and attempts to reconnect after a delay if there was an error.\n\nconnect: This function establishes a connection with the native port. It first checks if there is an existing port and removes any event listeners associated with it. Then, it creates a new connection with the native port and adds event listeners for message reception and disconnection.\n\nEnumTabs: This function enumerates all the tabs in the browser and constructs a message with information about each tab. The message is sent to the native port.\n\nEnumWindows: This function enumerates all the windows in the browser and constructs a message with information about each window. The message is sent to the native port.\n\nOnPageLoad: This function sets up event listeners for window creation, removal, and focus change. When these events occur, corresponding messages are constructed and sent to the native port.\n\ntabsOnCreated: This function handles the event when a new tab is created. It constructs a message with information about the new tab and sends it to the native port.\n\ntabsOnRemoved: This function handles the event when a tab is closed. It constructs a message with the ID of the closed tab and sends it to the native port.\n\ntabsOnUpdated: This function handles the event when a tab is updated. It checks if executing scripts is allowed for the tab and constructs a message with information about the updated tab. The message is sent to the native port.\n\ntabsOnActivated: This function handles the event when a tab is activated (switched to). It constructs a message with the ID of the activated tab and sends it to the native port.\n\nVarious helper functions: The code also includes several helper functions for interacting with tabs and windows, such as querying tabs, getting all windows, executing scripts in tabs, and sending messages to specific tabs.\n\nThe code defines three functions: TabsSendMessage, getAllFrames, and tabscreate. These functions wrap Chrome extension APIs to facilitate communication with tabs, web navigation, and tab creation.\n\nThe OnPageLoad function is called, but its implementation is not included in the provided code snippet.\n\nEvent listeners are set up using chrome.tabs.onCreated.addListener, chrome.tabs.onRemoved.addListener, chrome.tabs.onUpdated.addListener, and chrome.tabs.onActivated.addListener. These listeners handle events related to tab creation, removal, update, and activation.\n\nAnother event listener, chrome.downloads.onChanged.addListener, is set up to handle changes in the state of downloads. When a download is completed, the downloadsOnChanged function is called.\n\nThe chrome.runtime.onMessage.addListener function sets up a listener for incoming messages from the extension's content scripts or other parts of the extension. It checks if the received message is \"loadscript\" and responds accordingly.\n\nThe bck_runtimeOnMessage function is an asynchronous function called by the chrome.runtime.onMessage.addListener listener. It handles incoming messages and forwards them to the background script's message port. It also performs additional operations related to browser information and window coordinates.\n\nThe code checks if a message port is available (port != null) and sets up listeners for incoming messages (port.onMessage.addListener) and disconnection events (port.onDisconnect.addListener).\n\nIf the roboputil_script variable is not populated, the code sends a message to the message port requesting the \"roboputilscript\".\n\nThe code sets up a recurring interval function that sends a \"ping\" message to the message port every 1000 milliseconds. This is used for maintaining the connection between the background script and the content scripts.\n\nSeveral additional functions are defined: downloadsSearch, debuggerattach, debuggerdetach, debuggerEvaluate, permissionscontains, permissionsremove, permissionsrequest, hastabpermission, removetabpermission, and requesttabpermission. These functions wrap various Chrome extension APIs to handle downloads, debugger interaction, and permissions management."
  }
}