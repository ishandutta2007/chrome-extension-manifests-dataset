{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Apollo Inspector"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Adds apollo inspector devtools to Google Chrome"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "# Apollo Inspector\n\nApollo Inspector is a Chrome extension designed to facilitate debugging of GraphQL operations within the open-source GraphQL client, Apollo Client.\n\n## Purpose\n\nThe tool is indispensable for diagnosing a multitude of issues that may arise during GraphQL operations within Apollo Client. It provides insights into various aspects of operations, aiding in efficient debugging and optimization efforts.\n\n## What kind of issues can be debugged using the tool\n\n1. Identification of unwanted operations triggered during the render phase.\n2. Diagnosis of reasons behind multiple re-renders of the same watch query.\n3. Resolution of issues stemming from conflicting queries.\n4. Presentation of field names in case of missing field errors.\n5. Detailed time information to assess query execution patterns, including adherence to the Waterfall model.\n6. Detection of delays in data being written to the cache.\n7. Insight into the causes of operation failures.\n\n## Key Features\n\n1. Comprehensive Tracking: Tracks all types of operations including Query, Mutation, Subscription, and more.\n2. Detailed Information: Provides essential details for each operation, such as name, type, execution status, fetch policy, execution time, queuing time, and result size.\n3. Filtering Options: Filters available for efficient operation list management based on type, results source, and status.\n4. Affected Queries View: Clear visualization of operations responsible for re-rendering queries.\n5. JSON Data Copy: Ability to copy operation data in JSON format.\n6. Cache: Copy or evict apollo client cache.\n\n## Usage Instructions\n\nTo enable the Apollo Inspector extension:\n\n1. Single Apollo Client Instance: If your web app has a single instance of Apollo Client, attach it to the `__APOLLO_CLIENT__` variable on the window object.\n\n2. Multiple Apollo Client Instances: If your web app has multiple instances of Apollo Client, create an array (ClientObject[]) containing all instances and attach it to the `__APOLLO_CLIENTS__` variable on the window object.\n\nFor comprehensive guidance on how to use the extension, refer to the [official documentation](https://github.com/jpsahoo14/apollo-inspector-ui/blob/main/extension/readme.md)."
  }
}