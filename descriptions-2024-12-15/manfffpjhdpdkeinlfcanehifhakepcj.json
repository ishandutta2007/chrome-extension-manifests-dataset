{
  "name": {
    "am,ar,bg,bn,ca,cs,da,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "calc-extension",
    "de": "Rechner"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Calculate values of mathematical expressions",
    "de": "Wertberechnung mathematischer Ausdrücke"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "# calc-extension\n\n(C) Martin Väth <martin@mvath.de>\n\nThis project is under the GNU Public License 2.0.\n\nA WebExtension: Calculate values of mathematical expressions\n\nThe extension strives to be useful for everybody quickly needing\nbrief or mid-long calculations: in daily “browser” life, as a\nmathematician, or as a programmer - there is support for all needs.\n\nFormulas can be entered in the typical mathematician's or\nprogrammer's syntax - both is understood.\nThere is also support for lengthy sessions\n(saving/restoring, exporting to clipboard, etc).\n\nThe original motivation was to experiment with a Pratt parser.\nThere is already a much richer expression syntax than in most languages\n(implicit multiplication signs, no braces necessary for function calls),\nand it would be simple to extend the syntax to a more full-blown “language”.\n(In fact, earlier versions of __calc-extension__ had a simpler syntax.\nReaders interested in the parser implementation can check `data/js/parser.js`).\n\nAfter installing __calc-extension__, it can be used as follows.\n\nClick the __calc-extension__ symbol `1+2` or the link on the options page.\nThen a page opens where you can enter a formula (see below) which will be\ncalculated when you press the solver button (`~>`).\n(There is an option to use the enter key instead if you prefer.)\nThe result is then shown and you can enter the next formula.\nYou can also go back to an earlier entered formula and “recalculate” it\n(e.g. after you modified some variables).\nTo remove a formula from your list, simply remove the main formula text\nand press the solver button.\n\nA simple formula is a usual mathematical expression which consists of numbers,\nthe usual operators `+` `-` `*` `/` and braces `(` `)`.\nAs usual in mathematics (though not in most computer languages),\nit is possible to omit the multiplication sign `*`.\nHowever:\n\n__Be aware that `x` means the variable x and not a multiplication sign__!\n\nFor multiplication use instead one of the symbols `*` `·` `×` or simply omit it\n(a space can be used to separate adjacent tokens).\nThe division symbol is `/` or `:`.\n\nNumbers have the usual floating-point format, e.g. `17`  `0.1` `1.2e-3`,\nor they can be octal or hexadecimal: For an octal number start with `0`,\nfor a hexadecimal number start with `0x`.\n\nThere are further operators which can be used in expressions:\n\n- `%` remainder (“modulo”)\n- `**`or `↑` exponentiation (binds from right to left)\n- `&` bitwise AND\n- `|` bitwise OR\n- `^` bitwise XOR\n\nThere are also some mathematical functions available.\nNote that functions bind stronger than all binary operators, i.e.\n`sin PI/2` is the same as `sin(PI)/2` but differs from `sin(PI/2)`.\n\n- `sin` the sine, argument is in radians\n- `cos` the cosine, argument is in radians\n- `tan` the tangent, argument is in radians\n- `asin` the arcsine, in radians\n- `acos` the arccosine, in radians\n- `atan` the arctangent, in radians\n- `sinh` the hyperbolic sine\n- `cosh` the hyperbolic cosine\n- `tanh` the hyperbolic tangent\n- `asinh` the hyperbolic areasine\n- `acosh` the hyperbolic areacosine\n- `atanh` the hyperbolic areatangent\n- `log10` the base 10 logarithm\n- `log2` the base 2 logarithm\n- `log` the natural logarithm (base E)\n- `log1p` `log(1+x)` where `x` is the argument\n- `exp` the exponential function (base E)\n- `expm1` `exp x - 1` where `x` is the argument\n- `sqrt` the square root, that is `sqrt x = x ** (1/2)`\n- `cbrt` the cube root, that is `cbrt x = x ** (1/3)`\n- `abs` the absolute value\n- `sign` the signum (1, 0, or -1)\n- `floor` the value rounded down to an integer\n- `ceil` the value rounded up to an integer\n- `trunc` the value rounded to the integer of smaller absolute value\n- `round` the value rounded to its nearest integer\n- `fround` the value rounded to its nearest 32 bit float\n- `clz32` the number of leading zero bits in a 32 bit representation\n\nFurthermore, there are constants available:\n\n- `E` Euler's number exp 1\n- `PI` or `π` the circle number acos -1\n- `SQRT2` sqrt 2\n- `SQRT1_2` sqrt 1/2\n- `LN2` log 2\n- `LN10` log 10\n- `LOG2E` log2 E\n- `LOG10E` log10 E\n- `EPSILON` or `ε` the distance of 1 to the smallest larger floating point number\n\nFinally, it is possible to define variables with e.g. `a=...` and to use them.\nVariable names must only consist of English characters, numbers, or `_`.\n\nThe names of the functions and constants and operator precedence is similar to\nthat of javascript. However, functions in javascript require braces, and the\nmultiplication sign must not omitted.\n\nThe following things are further extensions:\n\nThere is a special variable name `#` which always refers to the result of\nthe last (succesful) calculation.\n\nThere are also special sequences which can occur anywhere in an expression\nand which cause options to switch (you can also switch them by the mouse).\nTo modify options more permanently (also for future sessions even across\nbrowser restarts), you have to store them or use the preferences window.\n\n- `'width:height'` textarea size\n- `\"base\"` switch output to base (2-36)\n- `!` new input fields are textareas (multiple lines)\n- `?` new input fields are for single lines\n\nThe actual calculation of the functions and number conversion occurs\nby javascript calls. Therefore, mathematical properties like available\nprecision, error messages, number limitations, and possible inaccuracies\n(and possibly even bugs) are inherited from the javascript interpreter.\n\n## Example session\n\n- `1 + 2(1+1) + (2-1)(3-2)`\n- ~> 6\n- `1·1 + 1×1 + 1 1 + 1*1`\n- ~> 4\n- `2↑2↑3 - 2**8 + 4/3 - 1:3`\n- -> 1\n- `1 - cos π/2 + cos(PI/2)`\n- ~> 1.5\n- `a = 3(# + 1)`\n- ~> 7.5\n- `# + 4a`\n- ~> 37.5\n- `0xF | 0100 \"16\"`\n- ~> 4f (in base 16)\n\n## Permissions\n\nThe extension requires the storage permission in order to store\noptions/accordion state and possibly a session on local storage.\n\n## Languages\n\nCurrently, the following languages are supported:\n\n- en (default language)\n- de"
  }
}