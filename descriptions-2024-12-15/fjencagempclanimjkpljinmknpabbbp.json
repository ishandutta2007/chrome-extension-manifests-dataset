{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Vi Editing Mode"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Automatically and non-intrusively add a vi editing mode to all textareas/inputs. Behaviour is unchanged until you hit Escape."
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Automatically and non-intrusively add a vi editing mode to all textarea/input\nelements on pages, so you can use vim keys/shortcuts to edit and navigate text.\nInputs/textareas keep working as they normally do (like insert mode, handled by\nthe browser), hitting \"escape\" enables command mode on the focused element,\nindicated with a box-shadow.\n\nFeatures:\n- Simple, automatic, non-intrusive vi editing.\n- Command, visual and visual-line modes.\n- Plenty of commands/keys (but please contribute more!)\n- Multi-level undo and redo.\n- Repeat.\n- The tab key inserts literal tabs after having been in command mode, until the\n  element loses focus.\n- Only basic addon permissions needed. (clipboard read/write permission\n  requested on first use).\n\nNon-goals:\n- vi-like keys for other browser behaviour, like navigating on a page or the\n  internet.\n- Full-blown vi/vim editor (not all commands are needed, it doesn't have to\n  look like a standalone vi/vim, it would be too much for an input element).\n- Marks, tags, macros, registers, custom key mappings and other advanced features.\n\n# Limitations\n\nSince vi.js uses basic textarea/input elements, it inherits some\nlimitations/behaviour:\n\nTextareas don't expose whether text (e.g. the selection) is visible in the\nviewport. This limits how vi.js can implement some commands/motions.\n\nInsert mode is handled by the browser (with the exeception of Tab, which can\ninsert a literal tab), including undo/redo while typing. JS doesn't have access\nto textarea undo/redo history. vi.js tracks history for changes it makes (based\non commands), and tracks changes during insert by comparing contents between\ngoing into insert mode. The edits a user makes in insert mode are turned into a\nsingle history change to undo/redo.\n\nIn vi/vim, the cursor is typically \"on\" a character. With a textarea, it is\nshown between characters. The position at the end of the line, after the last\ncharacter, before the newline, is not normally a separate position in vi. vi.js\nlets you navigate to these positions, which changes how some motion keys work.\n\nAccess to the clipboard is only explicitly with the \"y\" and \"p\" keys. Commands\nthat remove/replace text don't change the clipboard.\n\nNot all input types are supported, browsers only allow editing selections on\nsome types: text, search, url, tel, password. Others don't work: email, time,\netc.\n\nPopular messaging web applications have custom UI elements for sending messages,\nfor their rich text. They often don't use standard textarea/input elements, so\nthis plugin won't help with those apps.\n\nSome applications use \"Escape\" as a shortcut to cancel. Use \"ctrl-{\" as\nalternative.  Unfortunately, the obvious alternative \"ctrl-[\" is interpreted by\nfirefox as \"back\" and can't be intercepted.\n\nPlenty of vi/vim keys haven't been implemented yet. People typically use a\nsubset of all the many vi/vim key bindings. Please submit a PR for commands\nyou're missing and want. Keep the code maintainable.\n\nThe source code is Open Source, MIT-licensed, see https://github.com/mjl-/vijs."
  }
}