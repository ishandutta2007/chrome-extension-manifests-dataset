{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Parrot API mocking"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Hassle-free mocking of xhr and fetch calls."
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Mocking your API responses like a pro. Parrot allows you to mock any asynchronous API call you want. It does this by patching both Fetch and XMLHttpRequest in such way that the actual call will always be done, but the response will be substituted by the mock data you specified.\n\nðŸ’¡ When to use this extension?\n\nðŸ”¸ You are developing a front end that needs to connect to some back end API, but that back end API has not yet been developed or is down.\n\nðŸ”¸ You want to give a live demo but the back end API needed is currently not available or broken.\n\nðŸ”¸ You would not only like to test the happy flow, but would also like to see how your front end behaves given any possible alternate scenario or edge case.\n\nðŸ”¸ You are experiencing a nasty bug but have no way of reproducing it easily using the real back end system. You would like to tweak the response to check if any unexpected response could be the cause of your issue.\n\nðŸ’¡ How to use this extension?\n\nJust make sure you have the Parrot the network viewer (see below) option enabled and start your journey. Any API-call done will showup in the viewer and can be mocked by the click of one single button.\n\nAs an alternative, you can also start by pressing the \"Define your mocks\" button and then pressing the Add button to define a mocked response for a specific request. A line will show up on which you can define the HTTP verb/method and the URL-fragment of the request you would like to be mocked. The URL fragment is defined with a regular expression, allowing you to make any matching requirement as loose or strict as you would like it to be.\n\nNB\nIn cases where the request also has a payload (like POST), the content of that payload can be used for determining if mocking should take place. \n\nOn that same line you can then define the status code of your response, the exact response type and the payload to be returned. \n\nOnce the extension detects the method/URL you expressed, the regular call will still be done. However, once the actual response has been received, no matter it's actual result, it will be replaced by the mocked response you defined.\n\nNB\nNext to being JSON, for any response also SCRIPT can be specified. In this case plain JavaScript statements can be defined with which the original response can be modified (you can just reference the contextual variable \"response\").\n\nExample (note that no function or return statement is needed):\n\n   response.someProperty = 'someValue';\n   response.someArray.push('blabla');\n\nðŸ’¡ Multiple mock rules\n\nWhen determining the mock data to be substituted, there can be multiple rules matching the given URL and method. In this case, Parrot will just use the last available mock rule in top-down order.\n\nðŸ’¡ Timing your calls by adding a delay\n\nParticularly for checking for, or debugging of, potential race condition issues, for any request a delay (expressed in milliseconds) can be specified. This delay will be taken into account before the response is returned to the client that made the request. By carefully timing request/response cycles you can make sure that responses will be received in the exact order you would like them to be.\n\nðŸ’¡ Export and Import your mock rules\n\nThe set of mock rules can also be exported to the file system using the Export button. This allows you to share your mock data with others and also allows you to create/maintain sets of mock rules. Exported files can easily be reimported by using the Import button. Imported files will be appended to any currently existing mock rules in the extension, allowing you to stack multiple sets on top of each other.\n\nðŸ’¡ Notification when mock data has been used\n\nEvery time mock data has been substituted, a small notification will show up. This behavior can be turned off using the popup dialog. The notification will show the path that's being mocked, the number of mock rules applied on it's response and, if applicable, the delay that was taken into account.\n\nðŸ’¡ Network viewer\n\nParrot will show all asynchronous calls in a compact view directly attached to your content page. This network view offers you the possibility to show and mock any response with the click of one single button. The overview also directly shows which responses were mocked and which responses were original. In case of a mocked response, opening the mock dialog will show you the response that resulted after applying all involved mock rules.\n\nðŸ’¡ Localhost\n\nLocalhost resources will not be mocked by Parrot."
  }
}