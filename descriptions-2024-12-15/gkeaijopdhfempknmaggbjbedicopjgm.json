{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "WebGPU Dev Extension"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Provide some features helpful for WebGPU Development"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Features:\n\n* Print Debug Errors at their source.\n* Throw on encoder errors\n* Dump Shaders of WebGPU programs\n* Show entire shader on shader error\n* Log which type of GPU is being used on requestAdapter\n* Force low-power or high-performance GPU\n* Show how many devices are currently active on the page\n* Add Descriptors to Objects\n* Show bit names for GPUTexture.usage and GPUBuffer.usage in DevTools\n* Block Features\n* Disable WebGPU (to test your fallback)\n* Remove WebGPU (to test your fallback)\n* Add API Breakpoints\n* skip rAF frames\n* multiply time\n\nDetails\n\n* Print Debug Errors at their Source\n\nErrors in WebGPU are usually handled asynchronously which means the actual command that generated the error is often unknown. This extension adds early error checking so that hopefully you'll get an error stack at the place the error was generated making it easier to fix bugs\n\n* Throw on Encoder Errors\n\nNormally command buffer encoders, pass encoders, render bundle encoders only\ngenerate an error when you finish the command encoder. Enable the WebGPU-Debug-Helper\nto throw on these types of errors.\n\n* Dump Shaders of WebGPU programs\n\nSee the shader of the current page.\n\n* Log which type of GPU is being used on requestAdapter\n\nPrints the adapterInfo on each call to requestAdapter. This lets you see which GPU was used on a dual GPU machine as well as if compatibility mode was requested.\n\n* Force low-power or high-performance GPU\n\nForce low-power or high-performance GPU selection for a page.\n\n* Show how many devices are currently active on the page\n\nPrints a running total of the number of devices currently active on a page.\n\n* Add Descriptors to Objects\n\nAdds the descriptors used to create many objects to those objects. For example: When you call `createView` on a texture you pass in a descriptor. That descriptor is\nnot reflected in the view itself which can make it hard to see what's going on.\nThis adds that data onto the view so you can inspect it in the debugger or in the error messages printed by \"Show Errors\". Similarly, bindGroups, bindGroupLayouts,\npipelines, pipelineLayouts, pass encoders, query sets, samplers, shader modules,\nexternal textures, ...\n\n* Block Features\n\nLets you block webgpu features. For example, type in `shader-f16` and the shader-f16 feature will be blocked.  You can use this to test that your code, that is supposed to run without the feature, actually runs without the feature.\n\n* Disable or Remove the WebGPU API\n\nLets you test that you gracefully handle both the API returning null and the API not existing.\n\n* API Breakpoints\n\n Adds a `debugger` statement to the specified WebGPU API functions. Want to know where the page is calling importExternalTexture? Add a breakpoint.\n\nSource at https://github.com/greggman/webgpu-dev-extension"
  }
}