{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Salesforce Speedy Debugger"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Easy way to check the Debug logs"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Salesforce Debugger Chrome Extension\n\nSalesforce Debugger Chrome Extension is designed to streamline the debugging process for salesforce developers.This extension offers a comprehensive suite of features aimed at simplifying the management of Trace Flags and Debug Logs within the Salesforce environment. Whether you're troubleshooting code errors, monitoring system behavior, or optimizing performance, this tool provides efficient solutions tailored to your debugging needs.\n\nWith intuitive functionalities and seamless integration into your Salesforce workflow, this extension empowers developers to efficiently trace, analyze, and resolve issues, ultimately enhancing productivity and accelerating development cycles. From managing Trace Flags to searching and filtering Debug Logs, this extension equips developers with the tools needed to effectively debug and optimize their Salesforce applications.\n\nIn this document, we'll provide a concise overview of the extension's key features, outlining how each functionality enhances the debugging process for Salesforce developers. Whether you're new to debugging in Salesforce or seeking to streamline your current workflow, this extension offers a user-friendly interface and robust capabilities to support your debugging endeavors.\n\nTrace Flag : Functionalities \n\n1.\tAdd Current User (Button):\n●\tIf the trace flag for the current user (logged-in user) is not active, prompts to create a new trace flag.\n●\tIf the trace flag for the current user is active, displays active records and allows creating a new trace flag by selecting debug level. It replaces the existing trace flag upon saving.\n\n2.\tNew (Button):\n●\tCreates a trace flag for a user based on TraceEntityName, StartDate, Expiration Hours, and DebugLevel.\n●\tHandles creation for active users, prompts for error on past date selection, and disables save button until debug log is selected.\n●\tToast notification on successful creation.\n\n3.\tRefresh (Button):\n●\tRefreshes all trace flags.\n\n4.\tDelete (Button):\n●\tDeletes the selected record and notifies the user on the scrolled page.\n●\tShows error toast if the record is deleted from the org while editing, deleting, or renewing on the extension side.\n\n5.\tRenew (Button):\n●\tRenews trace flags for the next 24 hours.\n●\tShows error if the trace flag exists for the same traced entity, prompting the user to replace it upon saving.\n\nDebug Log : Functionalities \n\n1.\tUser Search Functionality:\n●\tEnables users to search debug logs of active trace flag users.\n●\tFilters debug logs using various options, allowing addition and removal of user names.\n\n2.\tSearch String Functionality:\n●\tFacilitates searching strings within the debug log body.\n●\tHighlights rows containing the searched string, with automatic de-highlighting upon change.\n●\tHighlights only the first page of pagination on search.\n\n3.\tAction Tabs:\n●\tProvides options to get all logs of the logged-in user, refresh all logs, and delete all logs.\n\n4.\tView (Button):\n●\tThe \"View\" button offers a comprehensive insight into various aspects of the debugging process, presenting a series of sub-tabs each with distinct functionalities. Within these tabs:\n➢\tLog Details: Users can access creation dates, log lengths, and associated user information.\n➢\tDebug Log: This tab displays the debug log body, color-coded to represent different labels for enhanced readability.\n➢\tQueries: Developers can review all SOQL queries present in the debug log, including details such as the line number in the Apex class or trigger where the query is written, the number of records retrieved, and the option to navigate directly to the query line within the debug log.\n➢\tUser Debug: Custom debug data, such as that generated by system.debug statements, is consolidated in this tab. Users can identify the line number where the debug statement is written, view the printed data, and navigate to the specific debug line within the debug log.\n➢\tOrder of Execution: This tab provides insights into debug log limits usage, detailing various limitations such as API call usage or heap size. Users can monitor their usage compared to set limits, with color-coded alerts indicating when usage exceeds 80% (yellow) or reaches 100% (red).\n➢\tOrg Limits: Users can access organization-wide limits across different categories presented in a tabular format, facilitating a comprehensive overview of the current usage and thresholds within the Salesforce environment.\n➢\tDownload: Users can download debug logs in Excel format with subtabs available on the page.\n\n5.\tDownload (Button):\n●\tUsers can download debug logs as well in Excel format.\n\n6.\tDelete (Button):\n●\tDeletes the selected record and notifies the user on the scrolled page.\n\nNote: To perform all the activity mentioned above, tool will be used to access the active session id from browser for respective salesforce org."
  }
}