{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Dev Helper"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Dev Helper"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Dev helper is all in one development and profiling extension for Google Chrome which has the following features:\n\n- Profiling webpages and drawing charts showing loading time for all assets, split by domain (including time till the first byte received)\n\n- Set up rewrite rules to override request and response urls, allowing developers to test without actually deploy new code.\n       Developers could override, add or replace request and response headers to test different scenarios. For example adding 'Access-Control-Allow-Origin: *' in the response header section will resolve cross domain script blocking. \nAnother way to use it is to replace asset or script (JavaScript and CSS) with local copy. This way the developer could make changes and test the functionality without deployment.\n\n1.Install the extension from chrome app store.\n2. Open pageâ€™s source code, and find the script tag, that you want to re-write.\n3. Copy the code, and host it locally\n4. Set up rewrite rule to load this file from your local web host \n\nNote, keep in mind that Match url is actually a regex so any regEx character should be escaped!\nFor example if you want to match http://mysite.com/global.js?version=1 and redirect it to http://localhost?version=1\nYou could do this:\nMatch url:  http:\\/\\/mysite\\.com\\/global.js?(.*)\nReplacement URL: http://localhost?($1)\n\nThe $1 will replace all query string parameters in the replacement url with these from the original url.\n\n\n- setting up rewrite rules to load assets from different locations. \n\tFor example a developer could write a regular expression pattern to match all JavaScript files in particular website where he/she is working on, and load them from their local host. This way active development could be done in real time, and new features could be tested before deploying to production. This method is also useful to debug a production issues.\n\n\texample: if developer wants to test how the new code will affect the production website: http://www.mysite.com where all Java Script comes from: http://mysite.com/scripts/all_java_script.js file, they could write a rule that will match 'http://mysite.com/scripts/all_java_script.js' and load it from the localhost 'http://localhost/all_java_script.js'\n\t\t\t \n- Setting proxy rules that match different Regular expression patterns.\n\tDevelopers could write different matching patterns for different proxy rules.\n\n- Script injection allowing to add new CSS or Java Script to a website for testing purposes.\n\nDetailed instructions and examples of how to use it could be found here: https://www.toni-develops.com/a-homepage-section/projects/using-dev-helper-chrome-extension-for-local-development/"
  }
}