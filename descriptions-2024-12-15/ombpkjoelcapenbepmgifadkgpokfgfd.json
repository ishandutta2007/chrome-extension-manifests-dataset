{
  "name": {
    "ar": "تعليم Dupes بعلامة التوقف",
    "am,bg,bn,ca,cs,da,el,en,en_AU,en_GB,en_US,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Bookmark Dupes",
    "de": "Lesezeichenduplikate",
    "es": "Marcadores Duplicados"
  },
  "short": {
    "ar": "عرض / ازالة علامات التوقف المزدوجة ، أو الحافظات الخالية ، أو الوصف",
    "am,bg,bn,ca,cs,da,el,en,en_AU,en_GB,en_US,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,sk,sl,sr,sv,sw,ta,te,th,tr,vi,zh_TW": "Display/Remove duplicate bookmarks or empty folders",
    "de": "Anzeige/Entfernung doppelter Lesezeichen oder leerer Ordner",
    "es": "Mostrar/Eliminar marcadores duplicados o carpetas vacías",
    "ru": "Поиск, отображение и удаление дублей закладок и пустых папок",
    "uk": "Пошук, відображення та видалення дублів закладок або порожніх папок",
    "zh_CN": "显示/移除重复的书签或空文件夹"
  },
  "long": {
    "ar": "# bookmarkdupes\n\n(C) Martin Väth <martin@mvath.de>, <mvath.develop@gmail.com>\n\nThis project is under the GNU Public License 2.0.\n\nA WebExtension which can display/remove duplicate bookmarks or empty folders.\n\nAfter installing bookmarkdupes, the usage is rather simple:\n\nTo open bookmarkdupes, click the extension symbol (duplicate stars) or\nuse the link in the options page of the extension.\n**Do not enable “Expert Mode”** (unless you fully understand the consequences,\nsee separate section).\nThen select what you want to display:\n\n1. Bookmark duplicates\n2. Empty folders\n3. Non-duplicate bookmarks\n\nAfter this, you will be offered the list of bookmarks with checkboxes;\nin case 1 the numbers indicate the order in which matching bookmarks\nwere added according to the internally stored date.\nThere are also buttons to select/unselect convenient sets of checkboxes.\n\nFinally, there are buttons to remove the selected bookmarks.\n\n**Be aware that removing bookmarks is irreversible!**\n*It is recommended to make backups of your bookmarks first!*\n\nCurrently, there is no working version of the extension available for android\n(see section **Known Bugs**).\n\n## Important\n\nWhen you reorganized/added/removed bookmarks, make sure to update the\ndisplayed list (by pressing the corresponding button) before removing\nbookmarks!\n\n## Permissions\n\nThe extension requires the following permissions for these reasons:\n\n1. “bookmarks” to read/modify bookmarks\n2. “storage” to store/restore the customized rules in expert mode.\n   Unfortunately, “storage” is not one of the optional permissions which might\n   be required only if that feature is actually requested by the user.\n\n## Expert Mode\n\nWhen selecting the checkbox for expert mode, details can be configured to\nignore certain bookmarks when calculating the list or under which cases\nbookmarks are considered to be dupes of each other.\n\nIn non-expert mode, two bookmarks are considered to be duplicates of each\nother if their URL coincides.\nIn expert mode there are custom rules by which the URL which is actually\nused for comparison is to be modified. The details are as follows.\n\nFor every bookmark the rules are applied in the given order.\nThere are 2 types of rules: Filter rules and URL modification rules\n(there are also disabled rules which are only listed but have no effect).\n\nFor both types of rules 4 regular expressions can be specified which are used\nto determine if the rule applies: If the corresponding regular expression is\nnonempty, the corresponding condition must be satisfied or the rule will not\napply. (In the case of filter rules, at least one of these 4 regular\nexpressions must be nonempty or that filter rules will not apply either.)\n\nThe 4 regular expressions refer to the bookmark's name or url, respectively,\nand the regular expressions must either match or not match, respectively.\n\n- The term “regular expression” refers to a javascript type regular expression.\n- The bookmark's name refers to the full bookmark path as it appears in the\n  browser with folder names separated by the null character.\n  For instance, if you have in “Bookmark Menu” a folder “Collection”\n  which contains your bookmark \"Example\", the bookmark's name becomes\n  `Bookmark Menu\\0Collection\\0Example` (where `\\0` denotes the null character\n  which can be matched by the regular expression with `\\0` or `\\x00`).\n- The bookmark's URL refers to the bookmark URL after possible modifications\n  by previous modifier rules.\n\nIf a filter rule applies, the corresponding bookmark is ignored, i.e.,\nit will not be considered as a duplicate and will neither appear in the\nlist of empty folders nor of all bookmarks.\n\nIf a URL modification rule applies, a text replacement will occur:\nAll parts matching a specified regular expression are substituted by a\nreplacement text (which might be empty).\nThe rules for this correspond to the javascript String.prototype.replace\nfunction with the global modifier.\n\nIn particular, the replacement text can contain symbols like\n`$&` or `$1` to refer to the whole matched text or to the\nmatch of the first brace in the regular expression, respectively.\n\nThe following 5 replacement texts have a special meaning which goes beyond\nthe standard javascript replacement rules.\n\nNote that this special meaning is only active if this is the full replacement\ntext. In other words, to get the special meaning, the replacement text must not\ncontain anything else than these 4-6 characters.\n(This does not really restrict the functionality, because one can combine\nseveral rules to work around that limitation if necessary.)\n\n1. `\\L$&` is the match in lower case.\n2. `\\U$&` is the match in upper case.\n3. `$URL` is the url before any other rules have been applied.\n4. `$NAME` is the bookmark's full name/path with folders separated by the\n    null character, e.g. “Bookmark Menu\\0Collection\\0Example”\n5. `$TITLE` is the bookmark's title without the path; for instance, for the\n    bookmark name “Bookmark Menu | Collection | Example” it is “Example”.\n\n## Examples for special tasks which can be done in Expert Mode\n\n### Task\n\n1. Consider two bookmarks as duplicate if their URL differs only in `https:` vs. `http:` at the beginnning.\n\n2. Consider two bookmarks as duplicate if their URL matches up to the first `?` symbol, i.e. only their additional information differs.\n\n3. Do not consider any bookmark from any folder named ``Mr. Dupe`` as a duplicate.\n\n4. Add all bookmarks to the list of duplicates, whether duplicate or not.\n\n5. Add all bookmarks from the folder `Bookmark Menu | Remove` to the list of duplicates (no matter whether they actually are duplicates).\n\n6. Consider two bookmarks as duplicate if they have the same name (instead of the same URL).\n\n7. Consider two bookmarks as duplicate if they reside in the same folder.\n\n### How to do the above tasks in Expert Mode\n\n1. Use the replacement rule: “Replace URL matches” `^http:` “by” `^https:`\n\nExplanation: By replacing everywhere the URL beginnning with `http:`\nby `https:`, it does not matter whether the actual URL started with `http:`\nor `https:`. Of course, we could have exchanged the roles of `http`\nand `https` in our rule.\n\n2. Use the replacement rule: “Replace URL matches” `\\?.*` “by” ` ` (empty string)\n\nExplanation: Simply omit the ? symbol and all other symbols following it\nin all URLs.\n\n3. Use the filter rule: “Name matches” `\\0Mr\\. Dupe\\0` or `\\0Mr[.] Dupe\\0`\n\nExplanation: If a bookmark is in a folder named “Mr. Dupe”, its full name (path) will contain the text “\\0Mr. Dupe\\0”; so match that text. Since the “.” symbol has a special meaning for regular expressions, we have to quote it. This can be done by either `\\.` or by looking for a character class `[…]` which contains only the single symbol `.`.\n\n4. Use the replacement rule: “Replace URL matches” `.+` “by” `constant`\n\nExplanation: Pretend that every bookmark has the URL `constant` by replacing all characters (`.+`) of the original URL by that text.\n\n5. Use the replacement rule: “Name Matches” `^Bookmark Menu\\0Remove\\0` “Replace URL matches” `.+` “by” `constant`\n\nAs in 4, but only for bookmarks whose full name starts with the matching path.\nThis works only if the folder contains at least 2 bookmarks (because otherwise `constant` is not a duplicate URL). Of course, one might use an actually duplicate URL instead of `constant` to work around this limitation.\n\n6. Use the replacement rule: “Replace URL matches” `.+` “by” `$TITLE`\n\nExplanation: Replace all bookmark URLs by the corresponding bookmark title when looking for dupes.\n\n7. Use the replacement rule “Replace URL matches” `.+` “by” `$NAME` followed by a further replacement rule “Replace URL matches” `[^\\0]*$` “by” ` ` (empty string)\n\nExplanation: First replace the URL by its full name path, and then omit the last component of this path by cutting of the longest sequence of non-`\\0`-symbols at the end.\n\n## Contributors\n\n(in alphabetical order)\n\n- Henaro aka Ironwool (Russian and Ukrainian translation; redesign icon in svg; provide favicon)\n- Juan Salvador Aleixandre Talens (Spanish translation)\n- YFdyh000 (Simplified Chinese translation)",
    "am,bg,bn,ca,cs,da,el,en,en_AU,en_GB,en_US,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,sk,sl,sr,sv,sw,ta,te,th,tr,vi,zh_TW": "# bookmarkdupes\n\n(C) Martin Väth <martin@mvath.de>, <mvath.develop@gmail.com>\n\nThis project is under the GNU Public License 2.0.\n\nA WebExtension which can display/remove duplicate bookmarks or empty folders.\n\nAfter installing bookmarkdupes, the usage is rather simple:\n\nTo open bookmarkdupes, click the extension symbol (duplicate stars) or\nuse the link in the options page of the extension.\n**Do not enable “Expert Mode”** (unless you fully understand the consequences,\nsee separate section).\nThen select what you want to display:\n\n1. Bookmark duplicates\n2. Empty folders\n3. Non-duplicate bookmarks\n\nAfter this, you will be offered the list of bookmarks with checkboxes;\nin case 1 the numbers indicate the order in which matching bookmarks\nwere added according to the internally stored date.\nThere are also buttons to select/unselect convenient sets of checkboxes.\n\nFinally, there are buttons to remove the selected bookmarks.\n\n**Be aware that removing bookmarks is irreversible!**\n*It is recommended to make backups of your bookmarks first!*\n\nCurrently, there is no working version of the extension available for android\n(see section **Known Bugs**).\n\n## Important\n\nWhen you reorganized/added/removed bookmarks, make sure to update the\ndisplayed list (by pressing the corresponding button) before removing\nbookmarks!\n\n## Permissions\n\nThe extension requires the following permissions for these reasons:\n\n1. “bookmarks” to read/modify bookmarks\n2. “storage” to store/restore the customized rules in expert mode.\n   Unfortunately, “storage” is not one of the optional permissions which might\n   be required only if that feature is actually requested by the user.\n\n## Expert Mode\n\nWhen selecting the checkbox for expert mode, details can be configured to\nignore certain bookmarks when calculating the list or under which cases\nbookmarks are considered to be dupes of each other.\n\nIn non-expert mode, two bookmarks are considered to be duplicates of each\nother if their URL coincides.\nIn expert mode there are custom rules by which the URL which is actually\nused for comparison is to be modified. The details are as follows.\n\nFor every bookmark the rules are applied in the given order.\nThere are 2 types of rules: Filter rules and URL modification rules\n(there are also disabled rules which are only listed but have no effect).\n\nFor both types of rules 4 regular expressions can be specified which are used\nto determine if the rule applies: If the corresponding regular expression is\nnonempty, the corresponding condition must be satisfied or the rule will not\napply. (In the case of filter rules, at least one of these 4 regular\nexpressions must be nonempty or that filter rules will not apply either.)\n\nThe 4 regular expressions refer to the bookmark's name or url, respectively,\nand the regular expressions must either match or not match, respectively.\n\n- The term “regular expression” refers to a javascript type regular expression.\n- The bookmark's name refers to the full bookmark path as it appears in the\n  browser with folder names separated by the null character.\n  For instance, if you have in “Bookmark Menu” a folder “Collection”\n  which contains your bookmark \"Example\", the bookmark's name becomes\n  `Bookmark Menu\\0Collection\\0Example` (where `\\0` denotes the null character\n  which can be matched by the regular expression with `\\0` or `\\x00`).\n- The bookmark's URL refers to the bookmark URL after possible modifications\n  by previous modifier rules.\n\nIf a filter rule applies, the corresponding bookmark is ignored, i.e.,\nit will not be considered as a duplicate and will neither appear in the\nlist of empty folders nor of all bookmarks.\n\nIf a URL modification rule applies, a text replacement will occur:\nAll parts matching a specified regular expression are substituted by a\nreplacement text (which might be empty).\nThe rules for this correspond to the javascript String.prototype.replace\nfunction with the global modifier.\n\nIn particular, the replacement text can contain symbols like\n`$&` or `$1` to refer to the whole matched text or to the\nmatch of the first brace in the regular expression, respectively.\n\nThe following 5 replacement texts have a special meaning which goes beyond\nthe standard javascript replacement rules.\n\nNote that this special meaning is only active if this is the full replacement\ntext. In other words, to get the special meaning, the replacement text must not\ncontain anything else than these 4-6 characters.\n(This does not really restrict the functionality, because one can combine\nseveral rules to work around that limitation if necessary.)\n\n1. `\\L$&` is the match in lower case.\n2. `\\U$&` is the match in upper case.\n3. `$URL` is the url before any other rules have been applied.\n4. `$NAME` is the bookmark's full name/path with folders separated by the\n    null character, e.g. “Bookmark Menu\\0Collection\\0Example”\n5. `$TITLE` is the bookmark's title without the path; for instance, for the\n    bookmark name “Bookmark Menu | Collection | Example” it is “Example”.\n\n## Examples for special tasks which can be done in Expert Mode\n\n### Task\n\n1. Consider two bookmarks as duplicate if their URL differs only in `https:` vs. `http:` at the beginnning.\n\n2. Consider two bookmarks as duplicate if their URL matches up to the first `?` symbol, i.e. only their additional information differs.\n\n3. Do not consider any bookmark from any folder named ``Mr. Dupe`` as a duplicate.\n\n4. Add all bookmarks to the list of duplicates, whether duplicate or not.\n\n5. Add all bookmarks from the folder `Bookmark Menu | Remove` to the list of duplicates (no matter whether they actually are duplicates).\n\n6. Consider two bookmarks as duplicate if they have the same name (instead of the same URL).\n\n7. Consider two bookmarks as duplicate if they reside in the same folder.\n\n### How to do the above tasks in Expert Mode\n\n1. Use the replacement rule: “Replace URL matches” `^http:` “by” `^https:`\n\nExplanation: By replacing everywhere the URL beginnning with `http:`\nby `https:`, it does not matter whether the actual URL started with `http:`\nor `https:`. Of course, we could have exchanged the roles of `http`\nand `https` in our rule.\n\n2. Use the replacement rule: “Replace URL matches” `\\?.*` “by” ` ` (empty string)\n\nExplanation: Simply omit the ? symbol and all other symbols following it\nin all URLs.\n\n3. Use the filter rule: “Name matches” `\\0Mr\\. Dupe\\0` or `\\0Mr[.] Dupe\\0`\n\nExplanation: If a bookmark is in a folder named “Mr. Dupe”, its full name (path) will contain the text “\\0Mr. Dupe\\0”; so match that text. Since the “.” symbol has a special meaning for regular expressions, we have to quote it. This can be done by either `\\.` or by looking for a character class `[…]` which contains only the single symbol `.`.\n\n4. Use the replacement rule: “Replace URL matches” `.+` “by” `constant`\n\nExplanation: Pretend that every bookmark has the URL `constant` by replacing all characters (`.+`) of the original URL by that text.\n\n5. Use the replacement rule: “Name Matches” `^Bookmark Menu\\0Remove\\0` “Replace URL matches” `.+` “by” `constant`\n\nAs in 4, but only for bookmarks whose full name starts with the matching path.\nThis works only if the folder contains at least 2 bookmarks (because otherwise `constant` is not a duplicate URL). Of course, one might use an actually duplicate URL instead of `constant` to work around this limitation.\n\n6. Use the replacement rule: “Replace URL matches” `.+` “by” `$TITLE`\n\nExplanation: Replace all bookmark URLs by the corresponding bookmark title when looking for dupes.\n\n7. Use the replacement rule “Replace URL matches” `.+` “by” `$NAME` followed by a further replacement rule “Replace URL matches” `[^\\0]*$` “by” ` ` (empty string)\n\nExplanation: First replace the URL by its full name path, and then omit the last component of this path by cutting of the longest sequence of non-`\\0`-symbols at the end.\n\n## Contributors\n\n(in alphabetical order)\n\n- Essam Ambr aka (JaMaYcKa) (Arabic translation)\n- Henaro aka Ironwool (Russian and Ukrainian translation; redesign icon in svg; provide favicon)\n- Sopor (Swedish translation)\n- Juan Salvador Aleixandre Talens (Spanish translation)\n- YFdyh000 (Simplified Chinese translation)",
    "de,es,ru,uk,zh_CN": "# bookmarkdupes\n\n(C) Martin Väth <martin@mvath.de>, <mvath.develop@gmail.com>\n\nThis project is under the GNU Public License 2.0.\n\nA WebExtension which can display/remove duplicate bookmarks, empty folders, or descriptions\n\nAfter installing bookmarkdupes, the usage is rather simple:\n\nTo open bookmarkdupes, click the extension symbol (duplicate stars) or\nuse the link in the options page of the extension.\n**Do not enable “Expert Mode”** (unless you fully understand the consequences,\nsee separate section).\nThen select what you want to display:\n\n1. Bookmark duplicates\n2. Empty folders\n3. Non-duplicate bookmarks\n\nAfter this, you will be offered the list of bookmarks with checkboxes;\nin case 1 the numbers indicate the order in which matching bookmarks\nwere added according to the internally stored date.\nThere are also buttons to select/unselect convenient sets of checkboxes.\n\nFinally, there are buttons to remove the selected bookmarks.\n\n**Be aware that removing bookmarks is irreversible!**\n*It is recommended to make backups of your bookmarks first!*\n\nCurrently, there is no working version of the extension available for android\n(see section **Known Bugs**).\n\n## Important\n\nWhen you reorganized/added/removed bookmarks, make sure to update the\ndisplayed list (by pressing the corresponding button) before removing\nbookmarks!\n\n## Permissions\n\nThe extension requires the following permissions for these reasons:\n\n1. “bookmarks” to read/modify bookmarks\n2. “storage” to store/restore the customized rules in expert mode.\n   Unfortunately, “storage” is not one of the optional permissions which might\n   be required only if that feature is actually requested by the user.\n\n## Expert Mode\n\nWhen selecting the checkbox for expert mode, details can be configured to\nignore certain bookmarks when calculating the list or under which cases\nbookmarks are considered to be dupes of each other.\n\nIn non-expert mode, two bookmarks are considered to be duplicates of each\nother if their URL coincides.\nIn expert mode there are custom rules by which the URL which is actually\nused for comparison is to be modified. The details are as follows.\n\nFor every bookmark the rules are applied in the given order.\nThere are 2 types of rules: Filter rules and URL modification rules\n(there are also disabled rules which are only listed but have no effect).\n\nFor both types of rules 4 regular expressions can be specified which are used\nto determine if the rule applies: If the corresponding regular expression is\nnonempty, the corresponding condition must be satisfied or the rule will not\napply. (In the case of filter rules, at least one of these 4 regular\nexpressions must be nonempty or that filter rules will not apply either.)\n\nThe 4 regular expressions refer to the bookmark's name or url, respectively,\nand the regular expressions must either match or not match, respectively.\n\n- The term “regular expression” refers to a javascript type regular expression.\n- The bookmark's name refers to the full bookmark path as it appears in the\n  browser with folder names separated by the null character.\n  For instance, if you have in “Bookmark Menu” a folder “Collection”\n  which contains your bookmark \"Example\", the bookmark's name becomes\n  `Bookmark Menu\\0Collection\\0Example` (where `\\0` denotes the null character\n  which can be matched by the regular expression with `\\0` or `\\x00`).\n- The bookmark's URL refers to the bookmark URL after possible modifications\n  by previous modifier rules.\n\nIf a filter rule applies, the corresponding bookmark is ignored, i.e.,\nit will not be considered as a duplicate and will neither appear in the\nlist of empty folders nor of all bookmarks.\n\nIf a URL modification rule applies, a text replacement will occur:\nAll parts matching a specified regular expression are substituted by a\nreplacement text (which might be empty).\nThe rules for this correspond to the javascript String.prototype.replace\nfunction with the global modifier.\n\nIn particular, the replacement text can contain symbols like\n`$&` or `$1` to refer to the whole matched text or to the\nmatch of the first brace in the regular expression, respectively.\n\nThe following 5 replacement texts have a special meaning which goes beyond\nthe standard javascript replacement rules.\n\nNote that this special meaning is only active if this is the full replacement\ntext. In other words, to get the special meaning, the replacement text must not\ncontain anything else than these 4-6 characters.\n(This does not really restrict the functionality, because one can combine\nseveral rules to work around that limitation if necessary.)\n\n1. `\\L$&` is the match in lower case.\n2. `\\U$&` is the match in upper case.\n3. `$URL` is the url before any other rules have been applied.\n4. `$NAME` is the bookmark's full name/path with folders separated by the\n    null character, e.g. “Bookmark Menu\\0Collection\\0Example”\n5. `$TITLE` is the bookmark's title without the path; for instance, for the\n    bookmark name “Bookmark Menu | Collection | Example” it is “Example”.\n\n## Examples for special tasks which can be done in Expert Mode\n\n### Task\n\n1. Consider two bookmarks as duplicate if their URL differs only in `https:` vs. `http:` at the beginnning.\n\n2. Consider two bookmarks as duplicate if their URL matches up to the first `?` symbol, i.e. only their additional information differs.\n\n3. Do not consider any bookmark from any folder named ``Mr. Dupe`` as a duplicate.\n\n4. Add all bookmarks to the list of duplicates, whether duplicate or not.\n\n5. Add all bookmarks from the folder `Bookmark Menu | Remove` to the list of duplicates (no matter whether they actually are duplicates).\n\n6. Consider two bookmarks as duplicate if they have the same name (instead of the same URL).\n\n7. Consider two bookmarks as duplicate if they reside in the same folder.\n\n### How to do the above tasks in Expert Mode\n\n1. Use the replacement rule: “Replace URL matches” `^http:` “by” `^https:`\n\nExplanation: By replacing everywhere the URL beginnning with `http:`\nby `https:`, it does not matter whether the actual URL started with `http:`\nor `https:`. Of course, we could have exchanged the roles of `http`\nand `https` in our rule.\n\n2. Use the replacement rule: “Replace URL matches” `\\?.*` “by” ` ` (empty string)\n\nExplanation: Simply omit the ? symbol and all other symbols following it\nin all URLs.\n\n3. Use the filter rule: “Name matches” `\\0Mr\\. Dupe\\0` or `\\0Mr[.] Dupe\\0`\n\nExplanation: If a bookmark is in a folder named “Mr. Dupe”, its full name (path) will contain the text “\\0Mr. Dupe\\0”; so match that text. Since the “.” symbol has a special meaning for regular expressions, we have to quote it. This can be done by either `\\.` or by looking for a character class `[…]` which contains only the single symbol `.`.\n\n4. Use the replacement rule: “Replace URL matches” `.+` “by” `constant`\n\nExplanation: Pretend that every bookmark has the URL `constant` by replacing all characters (`.+`) of the original URL by that text.\n\n5. Use the replacement rule: “Name Matches” `^Bookmark Menu\\0Remove\\0` “Replace URL matches” `.+` “by” `constant`\n\nAs in 4, but only for bookmarks whose full name starts with the matching path.\nThis works only if the folder contains at least 2 bookmarks (because otherwise `constant` is not a duplicate URL). Of course, one might use an actually duplicate URL instead of `constant` to work around this limitation.\n\n6. Use the replacement rule: “Replace URL matches” `.+` “by” `$TITLE`\n\nExplanation: Replace all bookmark URLs by the corresponding bookmark title when looking for dupes.\n\n7. Use the replacement rule “Replace URL matches” `.+` “by” `$NAME` followed by a further replacement rule “Replace URL matches” `[^\\0]*$` “by” ` ` (empty string)\n\nExplanation: First replace the URL by its full name path, and then omit the last component of this path by cutting of the longest sequence of non-`\\0`-symbols at the end.\n\n## Contributors\n\n(in alphabetical order)\n\n- Henaro aka Ironwool (Russian and Ukrainian translation; redesign icon in svg; provide favicon)\n- Juan Salvador Aleixandre Talens (Spanish translation)\n- YFdyh000 (Simplified Chinese translation)"
  }
}