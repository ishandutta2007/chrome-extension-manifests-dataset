{
  "name": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Tidy Gherkin"
  },
  "short": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Keep your Gherkin feature files consistent in layout, take the pain out of table formatting and cucumber step generation"
  },
  "long": {
    "am,ar,bg,bn,ca,cs,da,de,el,en,en_AU,en_GB,en_US,es,es_419,et,fa,fi,fil,fr,gu,he,hi,hr,hu,id,it,ja,kn,ko,lt,lv,ml,mr,ms,nl,no,pl,pt_BR,pt_PT,ro,ru,sk,sl,sr,sv,sw,ta,te,th,tr,uk,vi,zh_CN,zh_TW": "Allows users to:\n\n> Get started on a feature file quickly with a template.\n> Create feature files with a consistent layout.\n> Preview and quickly apply formatting changes to scenarios.\n> See tips on correct syntax and see syntax highlighting as they type.\n> Easily create scenario outline tables with automatic column formatting.\n> Save/Open/Create feature files directly from Tidy Gherkin.\n> Generate Cucumber for Java/Ruby/Javascript step definitions from your Gherkin feature file\n\n-----------------------------\n\nNew in this version:\n\n+ New feature: New feature: Support for auto-generation of Javascript step definitions.\n\nFeedback appreciated as always.\n\n-----------------------------\n\nJust start typing your gherkin or paste in what you have already. As you type you can preview the tidied output below and either click 'Tidy' or hit Ctrl+Enter to tidy what you have so far.\n\nDon't spend time trying to align all the pipes in your Scenario Outline table - just generate a table using the tool, roughly populate it with values and hit 'Tidy' to get that perfect alignment. If adding another row, just click the 'Insert Row After' button.\n\nIf you would like to generate some cucumber for Java step definitions, hit the 'JAVA STEPS' tab, or, for Ruby step definitions, hit the 'RUBY STEPS' tab.\n\nAs an example, the following Gherkin:\n\n    Given I have a new <customerType> customer\n\nWould generate the Java:\n\n    @Given(\"^I have a new (.+) customer$\")\n    public void i_have_a_new_customer(String customertype) throws Throwable {\n        throw new PendingException();\n    }\n\nAnd the following Ruby:\n\n    Given /^I have a new (.+) customer$/ do |customertype|\n        # do something\n    end\n\nThe generator will look for:\n\nParameters (for use with Example tables) such as <customerType>\nStrings such as \"customerA\"\nLists of strings such as \"customer1,customer2\"\n\nIn each case the appropriate regular expression and annotation will be constructed for the generated Java method.\n\nFurther examples:\n\n    When customer \"customerA\" logs in\n\n    Generates:\n\n    @When(\"^customer \\\"([^\\\"]*)\\\" logs in$\")\n    public void customer_something_logs_in(String strArg1) throws Throwable {\n        throw new PendingException();\n    }\n\n    Or for Ruby:\n\n    When /^customer \\\"([^\\\"]*)\\\" logs in$/ do |customera|\n        # do something\n    end\n\t\nAnd:\n\n    Then the customer sees \"transaction1,transaction2\" in their history\n\t\n    Generates:\n\n    @Then(\"^the customer sees \\\"([^\\\"]*)\\\" in their history$\")\n    public void the_customer_sees_something_in_their_history(List<String> list1) throws Throwable {\n        throw new PendingException();\n    }\n\n    Or for Ruby:\n\n    Then /^the customer sees \\\"([^\\\"]*)\\\" in their history$/ do |transaction1transaction2|\n        # do something\n    end"
  }
}